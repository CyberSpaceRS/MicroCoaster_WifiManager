
#include <Arduino.h>
#include <AyresWiFiManager.h>
#include "env.h"

// Instance du gestionnaire WiFi
AyresWiFiManager wifi;

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println("=========================================");
  Serial.println("üöÄ MicroCoaster - WiFiManager v2.0.0");
  Serial.println("=========================================");
  Serial.println();

  // Configuration du point d'acc√®s
  Serial.println("üì° Configuration du point d'acc√®s...");
  wifi.setAPCredentials(ESP_WIFI_SSID, ESP_WIFI_PASSWORD);
  Serial.print("   ‚îú‚îÄ SSID: ");
  Serial.println(ESP_WIFI_SSID);
  Serial.print("   ‚îî‚îÄ Mot de passe: ");
  Serial.println(ESP_WIFI_PASSWORD);
  
  // Configuration des timeouts
  Serial.println("‚è±Ô∏è  Configuration des timeouts...");
  wifi.setPortalTimeout(3600);  // 60 minutes (tr√®s long pour debug)
  wifi.setAPClientCheck(true);  // Ne pas fermer si des clients sont connect√©s
  wifi.setWebClientCheck(true); // Chaque requ√™te HTTP remet √† z√©ro le timer
  Serial.println("   ‚îú‚îÄ Timeout portail: 60 minutes");
  Serial.println("   ‚îú‚îÄ V√©rification clients: activ√©e");
  Serial.println("   ‚îî‚îÄ V√©rification requ√™tes web: activ√©e");
  
  // Configuration optionnelle
  Serial.println("üîß Configuration avanc√©e...");
  wifi.setCaptivePortal(true); // Activer les redirections pour portail captif
  Serial.println("   ‚îú‚îÄ Portail captif: activ√©");
  
  // Configuration hybride : premi√®re connexion + production
  wifi.setFallbackPolicy(AyresWiFiManager::FallbackPolicy::ON_FAIL);
  wifi.setAutoReconnect(true); // Reconnexion automatique en cas de d√©connexion
  Serial.println("   ‚îú‚îÄ Politique de secours: ON_FAIL");
  Serial.println("   ‚îî‚îÄ Reconnexion automatique: activ√©e");
  
  // Protection des fichiers critiques (emp√™che leur suppression accidentelle)
  wifi.setProtectedJsons({"/wifi.json"}); // Prot√®ge le fichier de configuration WiFi
  Serial.println("üõ°Ô∏è  Protection fichiers: /wifi.json");
  
  // Activation du bouton de secours (GPIO 0 par d√©faut)
  wifi.enableButtonPortal(true); // Bouton 2-5s = ouvre portail, ‚â•5s = efface identifiants
  Serial.println("üîò Bouton de secours: GPIO 0 (2-5s = portail, ‚â•5s = reset)");
  
  // Initialisation du WiFi Manager
  Serial.println();
  Serial.println("üîÑ Initialisation du WiFi Manager...");
  wifi.begin();  // Monte le syst√®me de fichiers, charge /wifi.json si pr√©sent
  Serial.println("üíæ Syst√®me de fichiers LittleFS mont√©");
  Serial.println("üìÅ Recherche du fichier de configuration /wifi.json...");
  
  Serial.println("üåê Tentative de connexion WiFi...");
  wifi.run();    // Essaie de se connecter en STA; si √ßa √©choue, applique la politique de fallback
  
  // V√©rification du statut apr√®s initialisation
  delay(2000); // Attendre un peu pour que la connexion se stabilise
  
  if (wifi.isConnected()) {
    Serial.println("‚úÖ Connexion WiFi r√©ussie !");
    Serial.println("üì° IP: " + WiFi.localIP().toString());
    Serial.println("üåê Mode: Client WiFi (STA)");
  } else {
    Serial.println("‚ö†Ô∏è  Connexion WiFi √©chou√©e");
    Serial.println("üîß Ouverture du portail de configuration...");
    Serial.println("üì° Point d'acc√®s: WifiManager-MicroCoaster");
    Serial.println("üåê IP du portail: 192.168.4.1");
    Serial.println("üîó Connectez-vous au WiFi puis allez sur http://192.168.4.1");
  }
  
  Serial.println();
  Serial.println("‚úÖ Initialisation termin√©e !");
  Serial.println("=========================================");
}

void loop() {
  wifi.update(); // Sert HTTP/DNS et g√®re les timeouts/LED
  
  // Affichage du statut de connexion (toutes les 30 secondes)
  static unsigned long lastStatusCheck = 0;
  static bool lastConnectionState = false;
  
  if (millis() - lastStatusCheck > 30000) {
    lastStatusCheck = millis();
    bool currentState = wifi.isConnected();
    
    if (currentState) {
      Serial.println("üü¢ WiFi connect√© - IP: " + WiFi.localIP().toString() + 
                     " | Signal: " + String(WiFi.RSSI()) + " dBm");
    } else {
      Serial.println("üî¥ WiFi d√©connect√© - Portail de configuration actif sur 192.168.4.1");
    }
    
    // D√©tecter les changements d'√©tat
    if (currentState != lastConnectionState) {
      if (currentState) {
        Serial.println("üéâ Connexion WiFi √©tablie !");
      } else {
        Serial.println("‚ö†Ô∏è  Connexion WiFi perdue, basculement en mode portail...");
      }
      lastConnectionState = currentState;
    }
  }
  
  // Votre code principal ici
  if (wifi.isConnected()) {
    // Code √† ex√©cuter quand connect√© au WiFi
    // Par exemple: envoi de donn√©es, synchronisation, etc.
  }
  
  delay(100);
}